name: Complete Deployment Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ infra/main, infra/develop ]
    paths:
      - "infrastructure/**"
      - "microservices/**"
  pull_request:
    branches: [ infra/main, infra/develop ]
    paths:
      - "infrastructure/**"
      - "microservices/**"

jobs:
  terraform-bootstrap:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Azure Login
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_CLIENT_ID }} \
            --password ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Terraform Init (bootstrap)
        working-directory: infrastructure/terraform/bootstrap
        run: terraform init

      - name: Terraform Plan (bootstrap)
        working-directory: infrastructure/terraform/bootstrap
        run: terraform plan -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" -out=tfplan

      - name: Terraform Apply with auto-import (bootstrap)
        working-directory: infrastructure/terraform/bootstrap
        run: |
          set -u
          MAX_ATTEMPTS=3
          ATTEMPT=0
          SUCCESS=0

          run_apply() {
            terraform apply -auto-approve tfplan 2>&1
          }

          extract_and_import() {
            local output="$1"
            echo "$output" | grep -Po 'A resource with the ID `"[^`"]+`"[^,]+with .*,' | while read -r line; do
              AZ_ID=$(echo "$line" | grep -Po 'ID `"\K[^`"]+')
              TF_RES=$(echo "$line" | sed -E 's/.*with (.*),$/\1/')
              echo "Importing $TF_RES -> $AZ_ID"
              terraform import "$TF_RES" "$AZ_ID"
            done
          }

          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT+1))
            echo "Attempt #$ATTEMPT"
            OUT=$(run_apply)
            EXIT=$?
            echo "$OUT"
            if [ $EXIT -eq 0 ]; then
              echo "Apply succeeded"
              SUCCESS=1
              break
            fi
            if echo "$OUT" | grep -q 'A resource with the ID'; then
              extract_and_import "$OUT"
            else
              echo "Apply failed with unexpected error"
              break
            fi
          done

          if [ $SUCCESS -ne 1 ]; then
            echo "Terraform apply failed after $MAX_ATTEMPTS attempts"
            exit 1
          fi

  terraform-dev:
    runs-on: ubuntu-latest
    needs: terraform-bootstrap
    outputs:
      acr_name: ${{ steps.terraform-output.outputs.acr_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Azure Login
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_CLIENT_ID }} \
            --password ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Terraform Init (dev)
        working-directory: infrastructure/terraform/environments/dev
        run: terraform init -backend-config="backend-config.hcl"

      - name: Terraform Plan (dev)
        working-directory: infrastructure/terraform/environments/dev
        run: terraform plan -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" -out=tfplan

      - name: Terraform Apply with auto-import (dev)
        working-directory: infrastructure/terraform/environments/dev
        run: |
          set -u
          MAX_ATTEMPTS=3
          ATTEMPT=0
          SUCCESS=0

          run_apply() {
            terraform apply -auto-approve tfplan 2>&1
          }

          extract_and_import() {
            local output="$1"
            echo "$output" | grep -Po 'A resource with the ID `"[^`"]+`"[^,]+with .*,' | while read -r line; do
              AZ_ID=$(echo "$line" | grep -Po 'ID `"\K[^`"]+')
              TF_RES=$(echo "$line" | sed -E 's/.*with (.*),$/\1/')
              echo "Importing $TF_RES -> $AZ_ID"
              terraform import "$TF_RES" "$AZ_ID"
            done
          }

          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT+1))
            echo "Attempt #$ATTEMPT"
            OUT=$(run_apply)
            EXIT=$?
            echo "$OUT"
            if [ $EXIT -eq 0 ]; then
              echo "Apply succeeded"
              SUCCESS=1
              break
            fi
            if echo "$OUT" | grep -q 'A resource with the ID'; then
              extract_and_import "$OUT"
            else
              echo "Apply failed with unexpected error"
              break
            fi
          done

          if [ $SUCCESS -ne 1 ]; then
            echo "Terraform apply failed after $MAX_ATTEMPTS attempts"
            exit 1
          fi

      - name: Get Terraform Outputs
        id: terraform-output
        working-directory: infrastructure/terraform/environments/dev
        run: |
          ACR_NAME=$(terraform output -raw acr_name 2>/dev/null || echo "${{ secrets.ACR_NAME }}")
          echo "acr_name=$ACR_NAME" >> $GITHUB_OUTPUT

  build-and-push:
    runs-on: ubuntu-latest
    needs: terraform-dev
    if: contains(github.event.head_commit.modified, 'microservices/') || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_CLIENT_ID }} \
            --password ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Build and Push Docker Images
        run: |
          ACR_NAME="${{ needs.terraform-dev.outputs.acr_name }}"
          if [ -z "$ACR_NAME" ]; then
            echo "Error: ACR_NAME not available from Terraform outputs"
            exit 1
          fi
          ACR_LOGIN_SERVER=$ACR_NAME.azurecr.io
          echo "Logging into ACR: $ACR_NAME"
          az acr login --name $ACR_NAME
          declare -a images=("log-message-processor" "auth-api" "frontend" "todos-api" "users-api")
          for img in "${images[@]}"; do
            echo "=== Building and pushing $img ==="
            docker build -t $img:latest ./microservices/$img
            docker tag $img:latest $ACR_LOGIN_SERVER/$img:latest
            docker push $ACR_LOGIN_SERVER/$img:latest
          done

  deploy-kubernetes:
    runs-on: ubuntu-latest
    needs: [terraform-dev, build-and-push]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_CLIENT_ID }} \
            --password ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get AKS Credentials
        run: |
          az aks get-credentials --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Deploy to Kubernetes
        run: |
          ACR_NAME="${{ needs.terraform-dev.outputs.acr_name }}"
          ACR_LOGIN_SERVER=$ACR_NAME.azurecr.io
          find ./k8s -name "*.yaml" -o -name "*.yml" | while read manifest; do
            echo "Applying $manifest"
            envsubst < $manifest | kubectl apply -f -
          done
        env:
          ACR_LOGIN_SERVER: ${{ needs.terraform-dev.outputs.acr_name }}.azurecr.io

      - name: Check Deployment Status
        run: |
          kubectl get pods
          kubectl get services
          kubectl get deployments
