name: Complete Deployment Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ infra/main, infra/develop ]
    paths:
      - "infrastructure/**"
      - "microservices/**"
  pull_request:
    branches: [ infra/main, infra/develop ]
    paths:
      - "infrastructure/**"
      - "microservices/**"

jobs:
  terraform-dev:
    runs-on: ubuntu-latest
    outputs:
      acr_name: ${{ steps.terraform-output.outputs.acr_name }}
      ingress_public_ip: ${{ steps.terraform-output.outputs.ingress_public_ip }}
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.13.1"

      - name: Terraform Init (dev)
        working-directory: infrastructure/terraform/environments/dev
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_CLIENT_ID }} \
            --password ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          terraform init \
          -backend-config="resource_group_name=terraform-state-rg" \
          -backend-config="storage_account_name=msworkshoptfstate" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=dev/terraform.tfstate"

      - name: Terraform Plan (dev)
        working-directory: infrastructure/terraform/environments/dev
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_CLIENT_ID }} \
            --password ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          terraform plan -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" -out=tfplan

      - name: Terraform Apply with Auto-Import (dev)
        shell: pwsh
        working-directory: infrastructure/terraform/environments/dev
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_CLIENT_ID }} \
            --password ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          terraform apply -auto-approve tfplan

      - name: Terraform Output (dev)
        id: terraform-output
        working-directory: infrastructure/terraform/environments/dev
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_CLIENT_ID }} \
            --password ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          echo "acr_name=$(terraform output -raw acr_name)" >> $GITHUB_OUTPUT
          echo "ingress_public_ip=$(terraform output -raw ingress_public_ip)" >> $GITHUB_OUTPUT

  build-and-push:
    runs-on: ubuntu-latest
    needs: terraform-dev
    steps:
      - uses: actions/checkout@v4

      - name: Build and Push Docker Images
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          set -e
          az login --service-principal \
            --username "$AZURE_CLIENT_ID" \
            --password "$AZURE_CLIENT_SECRET" \
            --tenant "$AZURE_TENANT_ID"
          az account set --subscription "$AZURE_SUBSCRIPTION_ID"
          ACR_NAME="msworkshopdevacr"
          ACR_LOGIN_SERVER=$ACR_NAME.azurecr.io
          az acr login --name $ACR_NAME
          INGRESS_IP="${{ needs.terraform-dev.outputs.ingress_public_ip }}"

          # Build log-message-processor
          docker buildx build --no-cache \
            --build-arg REDIS_HOST=redis \
            --build-arg REDIS_ZHK_PORT=6379 \
            --build-arg REDIS_CHANNEL=log_channel \
            --build-arg ZIPKIN_URL="http://$INGRESS_IP/api/v2/spans" \
            -t log-message-processor:latest \
            -f ./microservices/log-message-processor/Dockerfile \
            ./microservices/log-message-processor
          docker tag log-message-processor:latest $ACR_LOGIN_SERVER/log-message-processor:latest
          docker push $ACR_LOGIN_SERVER/log-message-processor:latest

          # Build auth-api
          docker buildx build --no-cache \
            --build-arg AUTH_ZHK_API_PORT=8080 \
            --build-arg USERS_API_ADDRESS="http://$INGRESS_IP/users-api" \
            --build-arg JWT_SECRET="$JWT_SECRET" \
            -t auth-api:latest \
            -f ./microservices/auth-api/Dockerfile \
            ./microservices/auth-api
          docker tag auth-api:latest $ACR_LOGIN_SERVER/auth-api:latest
          docker push $ACR_LOGIN_SERVER/auth-api:latest

          # Build frontend
          docker buildx build --no-cache \
            --build-arg VUE_APP_AUTH_API_ADDRESS="http://$INGRESS_IP/auth-api" \
            --build-arg VUE_APP_TODOS_API_ADDRESS="http://$INGRESS_IP/todos-api" \
            --build-arg VUE_APP_ZIPKIN_URL="http://$INGRESS_IP/api/v2/spans" \
            -t frontend:latest \
            -f ./microservices/frontend/Dockerfile \
            ./microservices/frontend
          docker tag frontend:latest $ACR_LOGIN_SERVER/frontend:latest
          docker push $ACR_LOGIN_SERVER/frontend:latest

          # Build todos-api
          docker buildx build --no-cache \
            --build-arg TODO_API_PORT=8082 \
            --build-arg JWT_SECRET="$JWT_SECRET" \
            --build-arg REDIS_HOST=redis \
            --build-arg REDIS_ZHK_PORT=6379 \
            --build-arg REDIS_CHANNEL=log_channel \
            --build-arg ZIPKIN_URL="http://$INGRESS_IP/api/v2/spans" \
            -t todos-api:latest \
            -f ./microservices/todos-api/Dockerfile \
            ./microservices/todos-api
          docker tag todos-api:latest $ACR_LOGIN_SERVER/todos-api:latest
          docker push $ACR_LOGIN_SERVER/todos-api:latest

          # Build users-api
          docker buildx build --no-cache \
            --build-arg JWT_SECRET="$JWT_SECRET" \
            --build-arg SERVER_PORT=8080 \
            --build-arg JAVA_OPTS="-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:MaxRAMFraction=1" \
            -t users-api:latest \
            -f ./microservices/users-api/Dockerfile \
            ./microservices/users-api
          docker tag users-api:latest $ACR_LOGIN_SERVER/users-api:latest
          docker push $ACR_LOGIN_SERVER/users-api:latest

          # Build/push redis
          docker pull redis:alpine
          docker tag redis:alpine $ACR_LOGIN_SERVER/redis:latest
          docker push $ACR_LOGIN_SERVER/redis:latest

          # Build/push zipkin
          docker pull openzipkin/zipkin
          docker tag openzipkin/zipkin $ACR_LOGIN_SERVER/zipkin:latest
          docker push $ACR_LOGIN_SERVER/zipkin:latest

  deploy-kubernetes:
    runs-on: ubuntu-latest
    needs: [terraform-dev , build-and-push]
    steps:
      - uses: actions/checkout@v4

      - name: Get AKS Credentials
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_CLIENT_ID }} \
            --password ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          az aks get-credentials \
          --resource-group msworkshop-dev-rg \
          --name msworkshop-dev-aks

      - name: Deploy to Kubernetes
        run: |
          ACR_NAME="msworkshopdevacr"
          ACR_LOGIN_SERVER=$ACR_NAME.azurecr.io
          find ./k8s -name "*.yaml" -o -name "*.yml" | while read manifest; do
            envsubst < $manifest | kubectl apply -f -
          done

      - name: Check Deployment Status
        run: |
          kubectl get pods
          kubectl get services
          kubectl get deployments
